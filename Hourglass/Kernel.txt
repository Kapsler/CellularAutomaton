typedef uchar uint8_t;
typedef uint uint32_t;

void kernel iterate(__global uint32_t* hourglassArray, __global const int* g_width, __global const int* g_height, __constant const uint8_t *g_kernelLUT, __constant const uint32_t *g_colorLUT, __global const int *g_kernelOffset, __global const ulong *g_randoms) {
	
	int y = get_global_id(1) * 2 + *g_kernelOffset;
	int x = get_global_id(0) * 2 + *g_kernelOffset;
	int height = *g_height;
	int width = *g_width;

	if(y >= height) return;
	if(x >= width) return;
	
	uint8_t cell1 = 0b0;
	uint8_t cell2 = 0b0;
	uint8_t cell3 = 0b0;
	uint8_t cell4 = 0b0;
	uint8_t checkKernel = 0b0;

	//BUILDING KERNEL
	//Top Left
	checkKernel = checkKernel | ((hourglassArray[(y - 1) * width + (x - 1)] == g_colorLUT[2]) << 7);
	checkKernel = checkKernel | ((hourglassArray[(y - 1) * width + (x - 1)] == g_colorLUT[1]) << 6);
	
	//Top Right
	checkKernel = checkKernel | ((hourglassArray[(y - 1) * width + x] == g_colorLUT[2]) << 5);
	checkKernel = checkKernel | ((hourglassArray[(y - 1) * width + x] == g_colorLUT[1]) << 4);

	//Bottom Left
	checkKernel = checkKernel | ((hourglassArray[y * width + (x - 1)] == g_colorLUT[2]) << 3);
	checkKernel = checkKernel | ((hourglassArray[y * width + (x - 1)] == g_colorLUT[1]) << 2);

	//Bottom Right
	checkKernel = checkKernel | ((hourglassArray[y * width + x] == g_colorLUT[2]) << 1);
	checkKernel = checkKernel | ((hourglassArray[y * width + x] == g_colorLUT[1]));

	//Looking up new case of built kernel
	if(checkKernel == 0b01010000)
	{
		float randVal = g_randoms[get_global_id(0) * get_global_id(1) % 256] / (ULONG_MAX + 1.0f);
		if (randVal < 0.5f) return;
	}
	checkKernel = g_kernelLUT[checkKernel];

	//Getting Cell Values
	cell1 = checkKernel >> 6;
	cell2 = (checkKernel & 0b00110000) >> 4;
	cell3 = (checkKernel & 0b00001100) >> 2;
	cell4 = (checkKernel & 0b00000011);

	//Rewriting Cells
	hourglassArray[(y - 1) * width + (x - 1)] = g_colorLUT[cell1];
	hourglassArray[(y - 1) * width + x] = g_colorLUT[cell2];
	hourglassArray[y * width + (x - 1)] = g_colorLUT[cell3];
	hourglassArray[y * width + x] = g_colorLUT[cell4];
}