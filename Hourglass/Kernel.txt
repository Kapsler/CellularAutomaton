void kernel passtime(global uint32_t* hourglassArray, global const int* g_height, global const int* g_width){
	
	int y = get_global_id(1);
	int x = get_global_id(0);
	int height = *g_height;
	int width = *g_width;

	if(y >= height) return;
	if(x >= width) return;
	
	uint8_t cell1 = 0b0;
	uint8_t cell2 = 0b0;
	uint8_t cell3 = 0b0;
	uint8_t cell4 = 0b0;
	uint8_t kernel = 0b0;

	//BUILDING KERNEL
	//Top Left
	if (hourglassArray[(y-1) * m_width + (x-1)] == sandColor)
	{
		kernel = kernel | 0b01000000;
	} else if(hourglassArray[(y - 1) * m_width + (x - 1)] == wallColor)
	{
		kernel = kernel | 0b11000000;
	}

	//Top Right
	if (hourglassArray[(y-1) * m_width + x] == sandColor)
	{
		kernel = kernel | 0b00010000;
	} else if (hourglassArray[(y - 1) * m_width + x] == wallColor)
	{
		kernel = kernel | 0b00110000;
	}

	//Bottom Left
	if (hourglassArray[y * m_width + (x-1)] == sandColor)
	{
		kernel = kernel | 0b00000100;
	} else if (hourglassArray[y * m_width + (x - 1)] == wallColor)
	{
		kernel = kernel | 0b00001100;
	}

	//Bottom Right
	if (hourglassArray[y * m_width + x] == sandColor)
	{
		kernel = kernel | 0b00000001;
	} else if (hourglassArray[y * m_width + x] == wallColor)
	{
		kernel = kernel | 0b00000011;
	}

	//Looking up new case of built kernel
	kernel = m_lookupTable[kernel];

	//Getting Cell Values
	cell1 = kernel >> 6;
	cell2 = (kernel & 0b00110000) >> 4;
	cell3 = (kernel & 0b00001100) >> 2;
	cell4 = (kernel & 0b00000011);

	//Rewriting Cell 1
	if (cell1 == sandCode)
	{
		hourglassArray[(y - 1) * m_width + (x - 1)] = sandColor;
	}
	else if (cell1 == emptyCode)
	{
		hourglassArray[(y - 1) * m_width + (x - 1)] = emptyColor;
	}
	else if (cell1 == wallCode)
	{
		hourglassArray[(y - 1) * m_width + (x - 1)] = wallColor;
	}

	//Rewriting Cell 2
	if (cell2 == sandCode)
	{
		hourglassArray[(y - 1) * m_width + x] = sandColor;
	}
	else if (cell2 == emptyCode)
	{
		hourglassArray[(y - 1) * m_width + x] = emptyColor;
	}
	else if (cell2 == wallCode)
	{
		hourglassArray[(y - 1) * m_width + x] = wallColor;
	}

	//Rewriting Cell 3
	if (cell3 == sandCode)
	{
		hourglassArray[y * m_width + (x - 1)] = sandColor;
	}
	else if (cell3 == emptyCode)
	{
		hourglassArray[y * m_width + (x - 1)] = emptyColor;
	}
	else if (cell3 == wallCode)
	{
		hourglassArray[y * m_width + (x - 1)] = wallColor;
	}

	//Rewriting Cell 4
	if (cell4 == sandCode)
	{
		hourglassArray[y * m_width + x] = sandColor;
	}
	else if (cell4 == emptyCode)
	{
		hourglassArray[y * m_width + x] = emptyColor;
	}
	else if (cell4 == wallCode)
	{
		hourglassArray[y * m_width + x] = wallColor;
	}
}